"use client";
"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var React = require("react"), context = require("./_chunks-cjs/context.cjs"), stega = require("@sanity/client/stega"), lite = require("dequal/lite"), useEffectEvent = require("use-effect-event");
function useDraftModeEnvironment() {
  const subscribe2 = React.useCallback((listener) => (context.environmentListeners.add(listener), () => context.environmentListeners.delete(listener)), []);
  return React.useSyncExternalStore(
    subscribe2,
    () => context.environment,
    () => "checking"
  );
}
function useDraftModePerspective() {
  const subscribe2 = React.useCallback((listener) => (context.perspectiveListeners.add(listener), () => context.perspectiveListeners.delete(listener)), []);
  return React.useSyncExternalStore(
    subscribe2,
    () => context.perspective,
    () => "checking"
  );
}
function useIsPresentationTool() {
  const environment = useDraftModeEnvironment();
  return environment === "checking" ? null : environment === "presentation-iframe" || environment === "presentation-window";
}
function useIsLivePreview() {
  const environment = useDraftModeEnvironment();
  return environment === "checking" ? null : environment === "presentation-iframe" || environment === "presentation-window" || environment === "live";
}
function reducer(state, { type, payload }) {
  switch (type) {
    case "query-change":
      return lite.dequal(state, payload) ? state : {
        ...state,
        data: lite.dequal(state.data, payload.data) ? state.data : payload.data,
        sourceMap: lite.dequal(state.sourceMap, payload.sourceMap) ? state.sourceMap : payload.sourceMap,
        perspective: lite.dequal(state.perspective, payload.perspective) ? state.perspective : payload.perspective
      };
    default:
      return state;
  }
}
const initialState = {
  data: null,
  sourceMap: null,
  perspective: null
};
function subscribe(listener) {
  return context.comlinkListeners.add(listener), () => context.comlinkListeners.delete(listener);
}
const EMPTY_QUERY_PARAMS = {}, LISTEN_HEARTBEAT_INTERVAL = 1e4;
function usePresentationQuery(props) {
  const [state, dispatch] = React.useReducer(reducer, initialState), { query, params = EMPTY_QUERY_PARAMS, stega: stega$1 = !0 } = props, comlink = React.useSyncExternalStore(
    subscribe,
    () => context.comlink,
    () => null
  ), projectId = React.useSyncExternalStore(
    subscribe,
    () => context.comlinkProjectId,
    () => null
  ), dataset = React.useSyncExternalStore(
    subscribe,
    () => context.comlinkDataset,
    () => null
  ), perspective = useDraftModePerspective(), handleQueryHeartbeat = useEffectEvent.useEffectEvent((comlink2) => {
    if (!projectId || !dataset || !perspective) {
      console.warn("usePresentationQuery: projectId, dataset and perspective must be set", {
        projectId,
        dataset,
        perspective
      });
      return;
    }
    perspective === "checking" || perspective === "unknown" || comlink2.post("loader/query-listen", {
      projectId,
      dataset,
      perspective,
      query,
      params,
      heartbeat: LISTEN_HEARTBEAT_INTERVAL
    });
  }), handleQueryChange = useEffectEvent.useEffectEvent(
    (event) => {
      lite.dequal(
        {
          projectId,
          dataset,
          query,
          params
        },
        {
          projectId: event.projectId,
          dataset: event.dataset,
          query: event.query,
          params: event.params
        }
      ) && dispatch({
        type: "query-change",
        payload: {
          data: event.result,
          sourceMap: event.resultSourceMap || null,
          perspective: event.perspective
        }
      });
    }
  );
  return React.useEffect(() => {
    if (!comlink) return;
    const unsubscribe = comlink.on("loader/query-change", handleQueryChange), interval = setInterval(() => handleQueryHeartbeat(comlink), LISTEN_HEARTBEAT_INTERVAL);
    return () => {
      clearInterval(interval), unsubscribe();
    };
  }, [comlink]), React.useMemo(() => stega$1 && state.sourceMap ? {
    ...state,
    data: stega.stegaEncodeSourceMap(state.data, state.sourceMap, { enabled: !0, studioUrl: "/" })
  } : state, [state, stega$1]);
}
exports.useDraftModeEnvironment = useDraftModeEnvironment;
exports.useDraftModePerspective = useDraftModePerspective;
exports.useIsLivePreview = useIsLivePreview;
exports.useIsPresentationTool = useIsPresentationTool;
exports.usePresentationQuery = usePresentationQuery;
//# sourceMappingURL=hooks.cjs.map
